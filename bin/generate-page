#!/usr/bin/env php
<?php

declare(strict_types=1);

/**
 * This file is part of CodeIgniter 4 framework.
 *
 * (c) CodeIgniter Foundation <admin@codeigniter.com>
 *
 * For the full copyright and license information, please view
 * the LICENSE file that was distributed with this source code.
 */

require __DIR__ . '/../vendor/codeigniter4/codeigniter4/system/Test/bootstrap.php';

use CodeIgniter\CLI\CLI;
use Translations\Tests\AbstractTranslationTestCase;

$locales = AbstractTranslationTestCase::$locales;

if ($locales === []) {
    CLI::error('No locales list available.');

    exit(1);
}

helper('filesystem');

$enDir = VENDORPATH . 'codeigniter4/codeigniter4/system/Language/en';

if (! is_dir($enDir)) {
    CLI::error('No "Language/en" directory. Please run "composer update".');

    exit(1);
}

function flatterArray(array $inputArray): array
{
    $iterator = new RecursiveIteratorIterator(new RecursiveArrayIterator($inputArray), RecursiveIteratorIterator::SELF_FIRST);
    $newArray = [];
    $path     = [];

    foreach ($iterator as $key => $value) {
        $path[$iterator->getDepth()] = $key;

        if (! is_array($value)) {
            $newArray[
                implode('.', array_slice($path, 0, $iterator->getDepth() + 1))
            ] = $value;
        }
    }

    return $newArray;
}

// get default "en" language for reference
$enFiles = get_filenames(
    $enDir,
    true,
    false,
    false
);

$enItems = [];

foreach ($enFiles as $enFile) {
    $enFileLines = include $enFile;
    $enFileLines = flatterArray($enFileLines);
    $enName      = basename($enFile);

    $enItems[$enName] = ['lines' => $enFileLines, 'count' => count($enFileLines)];
}

// create build directory
$buildDir = __DIR__ . '/../page/build';

if (! is_dir($buildDir) && ! mkdir($buildDir)) {
    CLI::error('Can\'t create build directory: "' . $buildDir . '"');

    exit(1);
}

// gather all other languages
$items = [];

$backgroundChoice = static function (float $percent): string {
    switch (true) {
        case $percent <= 33.33:
            return 'bg-danger';

        case $percent > 33.33 && $percent <= 66.67:
            return 'bg-warning';

        default:
            return 'bg-success';
    }
};

foreach ($locales as $localeKey => $locale) {
    CLI::write('Generating details for: ' . CLI::color($locale, 'green'));

    $langDir = __DIR__ . '/../Language/' . $locale;

    if (! is_dir($langDir)) {
        CLI::error('No such directory: "' . $langDir . '"');

        exit(1);
    }

    $files = get_filenames(
        $langDir,
        true,
        false,
        false
    );

    $items[$locale] = [
        'language' => preg_replace_callback(
            '/\ATranslations\\\\Tests\\\\(\S+)TranslationTest\z/',
            static fn (array $matches): string => preg_replace(
                '/(?<!^)((?=[\p{Lu}][^\p{Lu}])|(?<![\p{Lu}])(?=[\p{Lu}]))/u',
                ' ',
                $matches[1]
            ),
            $localeKey
        ),
        'locale'     => $locale,
        'percent'    => 0,
        'files'      => [],
        'background' => '',
    ];

    foreach ($files as $file) {
        $fileLines = include $file;
        $fileLines = flatterArray($fileLines);
        $name      = basename($file);

        $validLines = array_keys($enItems[$name]['lines']);

        $items[$locale]['files'][$name] = ['lines' => [], 'count' => 0, 'percent' => 0, 'missing' => [], 'background' => ''];

        foreach ($fileLines as $key => $val) {
            if (in_array($key, $validLines, true) && $val !== '') {
                $items[$locale]['files'][$name]['lines'][$key] = $val;
                $items[$locale]['files'][$name]['count']++;
            }
        }

        $items[$locale]['files'][$name]['missing']    = array_values(array_diff(array_keys($enItems[$name]['lines']), array_keys($items[$locale]['files'][$name]['lines'])));
        $items[$locale]['files'][$name]['percent']    = round($items[$locale]['files'][$name]['count'] * 100 / $enItems[$name]['count'], 1);
        $items[$locale]['files'][$name]['background'] = $backgroundChoice($items[$locale]['files'][$name]['percent']);
    }

    // detect missing files
    if ($missingFiles = array_diff(array_keys($enItems), array_keys($items[$locale]['files']))) {
        foreach ($missingFiles as $missingName) {
            $items[$locale]['files'][$missingName] = [
                'lines'      => [],
                'count'      => 0,
                'missing'    => array_keys($enItems[$missingName]['lines']),
                'percent'    => 'Missing file',
                'background' => $backgroundChoice(0),
            ];
        }
        // sort by file names
        ksort($items[$locale]['files']);
    }

    $items[$locale]['percent']    = round(array_sum(array_column($items[$locale]['files'], 'percent')) / count($items[$locale]['files']), 1);
    $items[$locale]['background'] = $backgroundChoice($items[$locale]['percent']);

    // save detailed info about language
    $fileName    = sprintf('%s/../page/build/%s.html', __DIR__, $locale);
    $fileContent = view('Translations\page\Views\detail', ['current' => $items[$locale], 'en' => $enItems]);
    file_put_contents($fileName, $fileContent);
}

CLI::write('Generating index file.');

// save general info about all languages
$fileName    = sprintf('%s/../page/build/index.html', __DIR__);
$fileContent = view('Translations\page\Views\list', ['languages' => $items]);
file_put_contents($fileName, $fileContent);
